#!/usr/bin/env node

import { promises as fs } from "fs";
import path from "path";

import chalk from "chalk";
import fse from "fs-extra";
import ora from "ora";
import YAML from "yaml";

import { LambdaClient } from "@aws-sdk/client-lambda";
import { fromIni } from "@aws-sdk/credential-providers";

import { createDeploymentPackage } from "../helpers/createDeploymentPackage";
import { deployFunction } from "../helpers/deployFunction";
import { showStatusOnly } from "../helpers/showStatusOnly";
import { validateDeployOptions } from "../helpers/validateDeployOptions";
import { DeployOptions, LambdaFunctionConfig, ParsedSAMTemplate, SAMTemplate } from "../types/app";
import { validateTemplate, formatValidationErrors } from "../helpers/validateTemplate";

const DEFAULT_ROLE_ARN = "arn:aws:iam::358922846691:role/service-role/prescription-generator-role-c9fkws8j";

const parseTemplate = async (templatePath: string): Promise<ParsedSAMTemplate> => {
  const templateContent = await fs.readFile(templatePath, "utf-8");
  const template: SAMTemplate = YAML.parse(templateContent);

  // Validate template structure before processing
  const validationErrors = validateTemplate(template);
  if (validationErrors.length > 0) {
    throw new Error(formatValidationErrors(validationErrors));
  }

  const resources = template.Resources || {};

  const lambdaResource = Object.entries(resources).find(([, resource]) => resource.Type === "AWS::Serverless::Function");

  if (!lambdaResource) {
    throw new Error("No AWS::Serverless::Function resource found in template.yaml");
  }

  const [resourceName, resource] = lambdaResource;
  const properties = resource.Properties!; // Safe to use ! after validation
  return {
    functionName: resourceName,
    runtime: properties.Runtime!,
    handler: properties.Handler!,
    timeout: properties.Timeout!,
    memorySize: properties.MemorySize!,
    codeUri: properties.CodeUri!,
    layers: properties.Layers,
  };
};

async function createLambdaClient(options: DeployOptions): Promise<LambdaClient> {
  // Use the specified profile to get credentials
  const creds = await fromIni({ profile: options.profile });

  const lambdaClient = new LambdaClient({
    region: options.region,
    credentials: creds,
  });

  return lambdaClient;
}

async function deployLambda(options: DeployOptions) {
  // Validate deploy options first
  const spinner = ora("Preparing deployment...\n").start();

  spinner.text = "Validating deployment options...";
  await validateDeployOptions(options);
  try {
    const templatePath = path.join(process.cwd(), "template.yml");
    if (!(await fse.pathExists(templatePath))) {
      throw new Error(
        "template.yml not found in current directory. Make sure you are in a Lambda project directory generated by lal-lambda-tools.",
      );
    }

    spinner.text = "Parsing and validating template.yml...";

    const templateConfig = await parseTemplate(templatePath);

    const functionName = options.functionName || templateConfig.functionName;

    spinner.text = "Setting up AWS clients...";

    const lambdaClient = await createLambdaClient({
      profile: options.profile,
      region: options.region,
    });

    if (options.statusOnly) {
      showStatusOnly(spinner, lambdaClient, functionName);
      return;
    }

    spinner.text = "Using execution role...";
    const roleArn = options.role || DEFAULT_ROLE_ARN;

    spinner.text = "Creating deployment package...";
    const zipBuffer = await createDeploymentPackage(templateConfig.codeUri);

    spinner.text = `Deploying Lambda function: ${functionName}...`;
    const functionArn: string = await deployFunction(lambdaClient, <LambdaFunctionConfig>{
      functionName: functionName,
      runtime: templateConfig.runtime,
      handler: templateConfig.handler,
      timeout: templateConfig.timeout,
      memorySize: templateConfig.memorySize,
      roleArn: roleArn,
      zipBuffer: zipBuffer,
      layers: templateConfig.layers,
    });
    spinner.succeed(chalk.green("‚úÖ Lambda function deployed successfully!"));
    console.log(chalk.blue("üöÄ Function Name: " + functionName));
    console.log(chalk.blue("üìç Region: " + options.region));
    console.log(chalk.blue("üîó Function ARN: " + functionArn));
    console.log(chalk.blue("‚ö° Runtime: " + templateConfig.runtime));
    console.log(chalk.blue("üéØ Handler: " + templateConfig.handler));

    if (templateConfig.layers && templateConfig.layers.length > 0) {
      console.log(chalk.blue("üì¶ Layers:"));
      templateConfig.layers.forEach((layer, index) => {
        console.log(chalk.blue(`   ${index + 1}. ${layer}`));
      });
    }
  } catch (error) {
    spinner.fail(`‚ùå Deployment failed: ${error}`);
    throw error;
  }
}

export { deployLambda };
